# -*- coding: utf-8 -*-
import os
import sys
import requests
import subprocess
import time
from dotenv import load_dotenv

load_dotenv()


class AIAssistant:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –≤–µ—Ä—Å–∏–∏"""
        self.api_key = os.getenv("OPENAI_API_KEY")
        self.pycharm_path = os.getenv("PYCHARM_PATH")
        self.version = self.detect_current_version()

    def detect_current_version(self) -> int:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–π–ª–æ–≤"""
        max_version = 1
        for file in os.listdir('..'):
            if file.startswith('assistant_v') and file.endswith('.py'):
                try:
                    ver = int(file.split('_v')[1].split('.py')[0])
                    if ver > max_version:
                        max_version = ver
                except ValueError:
                    continue
        return max_version

    def ask_ai(self, prompt: str, max_retries=3) -> str:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(max_retries):
            try:
                response = requests.post(
                    "https://api.openai.com/v1/chat/completions",
                    headers={
                        "Authorization": f"Bearer {self.api_key}",
                        "Content-Type": "application/json"
                    },
                    json={
                        "model": "gpt-3.5-turbo",
                        "messages": [{"role": "user", "content": prompt}],
                        "temperature": 0.7
                    },
                    timeout=30  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                )
                response.raise_for_status()
                return response.json()["choices"][0]["message"]["content"]
            except requests.exceptions.Timeout:
                if attempt == max_retries - 1:
                    return "–û—à–∏–±–∫–∞: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"
                time.sleep(5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            except requests.exceptions.RequestException as e:
                return f"–û—à–∏–±–∫–∞: {str(e)}"
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API"

    def self_upgrade(self, instruction: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π"""
        with open(__file__, 'r', encoding='utf-8') as f:
            current_code = f.read()

        prompt = (f"–£–ª—É—á—à–∏ —ç—Ç–æ—Ç –∫–æ–¥ Python —Å—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
                  f"1. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: {instruction}\n"
                  f"2. –°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏\n"
                  f"3. –î–æ–±–∞–≤—å –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞\n\n"
                  f"{current_code}")

        new_code = self.ask_ai(prompt)
        if new_code.startswith("–û—à–∏–±–∫–∞"):
            print(new_code)
            return None

        self.version += 1
        new_file = f"self-study_v{self.version}.py"

        with open(new_file, 'w', encoding='utf-8') as f:
            f.write(new_code)

        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≤–µ—Ä—Å–∏—è v{self.version}")
        return new_file

    def download_file_from_url(self, url: str, save_path: str) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            response = requests.get(url, stream=True, timeout=30)
            response.raise_for_status()
            with open(save_path, 'wb') as f:
                for chunk in response.iter_content(1024):
                    f.write(chunk)
            return True
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return False

    def delete_file(self, file_path: str) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(file_path):
                os.remove(file_path)
                return True
            return False
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            return False


def main():
    assistant = AIAssistant()
    print(f"ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç v{assistant.version}")
    print("–ö–æ–º–∞–Ω–¥—ã: '—É–ª—É—á—à–∏—Ç—å [–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è]', '–≤—ã—Ö–æ–¥'")

    while True:
        command = input("\n> ").strip().lower()

        if command == "–≤—ã—Ö–æ–¥":
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
            break

        elif command.startswith("—É–ª—É—á—à–∏—Ç—å "):
            instruction = command[9:].strip()
            if not instruction:
                print("–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
                continue

            new_file = assistant.self_upgrade(instruction)
            if new_file:
                try:
                    subprocess.Popen([sys.executable, new_file])
                    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é {new_file}...")
                    break
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        else:
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")


if __name__ == "__main__":
    main()