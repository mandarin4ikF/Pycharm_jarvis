"""
indexer.py ‚Äï ¬´—É–º–Ω—ã–π¬ª –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è Agent¬†Zero
=========================================================
üîç  –ò—â–µ—Ç .exe / .lnk / .py, –Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —è–≤–Ω—ã–π –º—É—Å–æ—Ä ‚Äë uninstall, update, helper¬†–∏¬†—Ç.‚ÄØ–¥.
‚öñÔ∏è  –ö–∞–∂–¥–æ–º—É —Ñ–∞–π–ª—É –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è score; –≤ –∏–Ω–¥–µ–∫—Å –ø–æ–ø–∞–¥–∞—é—Ç —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ–≥–æ score ‚â•¬†TRESHOLD.
üìÑ  –ò—Ç–æ–≥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ app_index.json (—á–∏—Ç–∞–µ—Ç—Å—è assistant.py / listen.py).

–ó–∞–ø—É—Å–∫
------
    python indexer.py                         # —Å–∫–∞–Ω–∏—Ä—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    python indexer.py "D:/Games" "E:/Portable"  # + –ª—é–±—ã–µ –≤–∞—à–∏ –ø—É—Ç–∏

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
-----------
- pefile¬†(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∏): `pip install pefile`
- indexer/aliases.py¬†‚Äî —Å–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤ (–Ω—É–∂–Ω–æ –¥–ª—è –±–æ–Ω—É—Å–æ–≤ –ø–æ score)

"""
from __future__ import annotations

import argparse
import json
import os
import pathlib
import sys
import ctypes
import time
from typing import Dict, List

# --- –≤–Ω–µ—à–Ω—è—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å --------------------------------------
try:
    import pefile  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∏
except ImportError:     # –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞¬†‚Äî –ø–æ–¥–ø–∏—Å—å –ø—Ä–æ—Å—Ç–æ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º
    pefile = None

# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤
import aliases
ALIASES = aliases.ALIASES



# ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
# ‚ïë           –ö –û –ù –° –¢ –ê –ù –¢ –´           ‚ïë
# ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
SKIP_DIR_NAMES: set[str] = {
    ".venv", "venv", "env", ".git", "__pycache__", ".cache",
    "node_modules", "dist", "build", ".idea", ".vscode",
    "appdata", "temp", "packages"
}

TARGET_EXTENSIONS: tuple[str, ...] = (".exe", ".py", ".url")

DEFAULT_PATHS: list[pathlib.Path] = [
    pathlib.Path.home() / "Downloads",
    pathlib.Path.home() / "Desktop",
    pathlib.Path.home() / "Documents",
    pathlib.Path.home() / "AppData" / "Local" / "Programs",
    pathlib.Path("C:/Program Files"),
    pathlib.Path("C:/Program Files (x86)"),
    pathlib.Path.home() / "AppData" / "Roaming" / "Microsoft" / "Windows" / "Start Menu" / "Programs" / "Steam",
]

OUTPUT_FILE = pathlib.Path(__file__).with_name("app_index.json")

# --- —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ ----------------------------------------------------
GOOD_MATCH_PARENTS = 10  # exe=–∏–º—è_–ø–∞–ø–∫–∏
GOOD_ALIAS_HIT     = 8   # –∏–º—è —Å–æ–≤–ø–∞–ª–æ —Å –∫–ª—é—á–æ–º –∏–∑ ALIASES
BAD_STOPWORD       = -10 # uninstall / update ‚Ä¶
BAD_DIRNAME        = -5  # installer / redist ‚Ä¶
BAD_SIZE           = -10  # –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä

TRESHOLD = 3       # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π score, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –∏–Ω–¥–µ–∫—Å

STOPWORDS = {
    "uninstall", "update", "setup", "helper", "crash",
    "service", "patch", "install", "debug"
}
BAD_DIR_PARTS = {
    "update", "installer", "redist", "patcher",
    "resources", "bin", "debug", "x64", "x86"
}


# ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
# ‚ïë         –ü –û –õ –ï –ó –ù –´ –ï  –§-–¶ –ò –ò      ‚ïë
# ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
def _sanitize_key(path: pathlib.Path) -> str:
    """–ò–º—è —Ñ–∞–π–ª–∞ ‚Üí –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤."""
    return path.stem.lower().replace(" ", "")


def _resolve_windows_shortcut(lnk_path: str) -> str | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–ª–µ–≤–æ–π –ø—É—Ç—å —è—Ä–ª—ã–∫–∞ (.lnk) –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å.
    –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ Windows; –Ω–∞ –¥—Ä—É–≥–∏—Ö –û–° –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë—Ç None.
    """
    if sys.platform != "win32":
        return None

    CLSID_ShellLink = ctypes.c_buffer(b'\x01\x14\x02\x00\x00\x00\x00\x00\xC0'
                                      b'\x00\x00\x00\x00\x00\x00F')
    IID_IShellLink  = ctypes.c_buffer(b'\xF9\x14\x02\x00\x00\x00\x00\x00\xC0'
                                      b'\x00\x00\x00\x00\x00\x00F')

    shell = ctypes.OleDLL('ole32').CoCreateInstance
    psl = ctypes.c_void_p()
    if shell(CLSID_ShellLink, None, 1, IID_IShellLink, ctypes.byref(psl)):
        return None

    lnk = ctypes.POINTER(ctypes.c_void_p)()
    if ctypes.cast(psl, ctypes.POINTER(ctypes.c_void_p * 5))[0][4](lnk_path, 0):
        return None

    buf = ctypes.create_unicode_buffer(260)
    if ctypes.cast(psl, ctypes.POINTER(ctypes.c_void_p * 21))[0][20](buf, 260, None, 0):
        return None
    return buf.value or None


def score_exe(path: pathlib.Path) -> int:
    """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ –Ω–∞–±–æ—Ä—É —ç–≤—Ä–∏—Å—Ç–∏–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π score."""
    score = 0
    stem = path.stem.lower()

    # 1) exe = –∏–º—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–∏
    if stem == path.parent.stem.lower().replace(" ", ""):
        score += GOOD_MATCH_PARENTS

    # 2) –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å ALIASES
    if stem in ALIASES:
        score += GOOD_ALIAS_HIT

    # 3) —Å—Ç–æ–ø‚Äë—Å–ª–æ–≤–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞
    if any(w in stem for w in STOPWORDS):
        score += BAD_STOPWORD

    # 4) ¬´–ø–ª–æ—Ö–∏–µ¬ª —á–∞—Å—Ç–∏ –ø—É—Ç–∏
    if any(part.lower() in BAD_DIR_PARTS for part in path.parts):
        score += BAD_DIRNAME

    # 5) –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (<30‚ÄØ–ö–ë¬†–∏–ª–∏ >1‚ÄØ–ì–ë)
    try:
        size_mb = path.stat().st_size / 1_048_576
        if size_mb < 3:
            score += BAD_SIZE
    except PermissionError:
        pass  # –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚Üí –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
    
    # 6) –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ, —á—Ç–æ –¥–∞–≤–Ω–æ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–ª
    mtime = path.stat().st_mtime
    years_ago = (time.time() - mtime) / (30*24*3600)
    if years_ago > 1:
        score -= 3
    
    # 7) –∏–≥—Ä—ã –∏–∑ —Å—Ç–∏–º
    if path.suffix.lower() == ".url" and "steam" in str(path).lower():
        score += 15

    return score


# ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
# ‚ïë          –ì –õ –ê –í –ù –´ –ï  –§‚Äë–¶ –ò –ò       ‚ïë
# ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
def scan_folders(start_paths: List[pathlib.Path]) -> Dict[str, str]:
    """
    –û–±—Ö–æ–¥–∏—Ç –≤—Å–µ start_paths, –ø—Ä–∏–º–µ–Ω—è–µ—Ç score_exe(), —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å
    {–∫–ª—é—á: –ø–æ–ª–Ω—ã–π_–ø—É—Ç—å}.
    """
    results: Dict[str, str] = {}

    for base in start_paths:
        if not base.exists():
            continue
        print(f"üîç –°–∫–∞–Ω–∏—Ä—É–µ–º: {base}")

        for root, dirs, files in os.walk(base):
            dirs[:] = [d for d in dirs if d.lower() not in SKIP_DIR_NAMES]

            for file in files:
                if not file.lower().endswith(TARGET_EXTENSIONS):
                    continue

                p = pathlib.Path(root) / file

                # —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —è—Ä–ª—ã–∫ .lnk
                if p.suffix.lower() == ".lnk":
                    target = _resolve_windows_shortcut(str(p))
                    if target and pathlib.Path(target).exists():
                        p = pathlib.Path(target)
                    else:
                        continue

                key = _sanitize_key(p)
                file_score = score_exe(p)

                # –æ—Å—Ç–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ —Ö–æ—Ä–æ—à–∏–π score –∏ .exe –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ .py
                if file_score >= TRESHOLD and (
                    key not in results or p.suffix.lower() == ".exe"
                ):
                    results[key] = str(p)

    return results


def save_index(index: Dict[str, str], path: pathlib.Path = OUTPUT_FILE) -> None:
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –≤ JSON."""
    path.write_text(json.dumps(index, ensure_ascii=False, indent=4), encoding="utf-8")
    print(f"üíæ –ò–Ω–¥–µ–∫—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {path}  ({len(index)} –æ–±—ä–µ–∫—Ç–æ–≤)")


# ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
# ‚ïë               C L I                  ‚ïë
# ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="–°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Å–æ–∑–¥–∞—ë—Ç app_index.json —Å –ø–æ–ª–µ–∑–Ω—ã–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏."
    )
    parser.add_argument("extra", nargs="*", help="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()

    start_dirs = DEFAULT_PATHS + [pathlib.Path(p) for p in args.extra]
    start_dirs = [p.resolve() for p in start_dirs if p.exists()]

    if not start_dirs:
        print("‚ùå –ù–∏ –æ–¥–Ω–æ–π –≤–∞–ª–∏–¥–Ω–æ–π —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        sys.exit(1)

    index = scan_folders(start_dirs)
    if not index:
        print("‚ö†Ô∏è  –ù–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        sys.exit(0)

    save_index(index)
